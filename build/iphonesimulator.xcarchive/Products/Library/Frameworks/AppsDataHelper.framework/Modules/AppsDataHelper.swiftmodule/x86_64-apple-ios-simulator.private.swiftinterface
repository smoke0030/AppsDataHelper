// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AppsDataHelper
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppsFlyerLib
import Combine
import Foundation
import Network
import Swift
import SwiftUI
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class nOU7rhoT {
  public static let shared: AppsDataHelper.nOU7rhoT
  public func start()
  @objc deinit
}
public enum ZbYKjd7e {
  case success(Foundation.URL)
  case vNgR1Ed3(Foundation.URL?)
  case rvLy4Q8p
}
public enum BWGSsreD {
  case portrait
  case landscape
  case all
  public var mask: UIKit.UIInterfaceOrientationMask {
    get
  }
  public static func == (a: AppsDataHelper.BWGSsreD, b: AppsDataHelper.BWGSsreD) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class mx4iUmzK : Combine.ObservableObject {
  public static let shared: AppsDataHelper.mx4iUmzK
  @Combine.Published @_projectedValueProperty($orientation) public var orientation: AppsDataHelper.BWGSsreD {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $orientation: Combine.Published<AppsDataHelper.BWGSsreD>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func va9vW7Ls(_ orientationType: AppsDataHelper.BWGSsreD)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct OrientationModifier : SwiftUI.ViewModifier {
  public init(orientation: AppsDataHelper.BWGSsreD)
  @_Concurrency.MainActor(unsafe) public func body(content: AppsDataHelper.OrientationModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s14AppsDataHelper19OrientationModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func supportedOrientations(_ orientation: AppsDataHelper.BWGSsreD) -> some SwiftUI.View
  
}
public protocol OrientationDelegate : AnyObject {
  func iE6EOopj() -> UIKit.UIInterfaceOrientationMask
}
extension UIKit.UIApplicationDelegate {
  @_Concurrency.MainActor(unsafe) public func FvrglQ90(for window: UIKit.UIWindow?) -> UIKit.UIInterfaceOrientationMask
}
extension Foundation.NSNotification.Name {
  public static let A5yP4ZqD: Foundation.Notification.Name
  public static let A752rYoO: Foundation.Notification.Name
  public static let usF1WuRa: Foundation.Notification.Name
}
extension UIKit.UIApplicationDelegate {
  @_Concurrency.MainActor(unsafe) public func bdBLEnyX(deviceToken: Foundation.Data)
}
@_Concurrency.MainActor(unsafe) public struct StartView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(core: AppsDataHelper.BWGSsreD = .all, game: AppsDataHelper.BWGSsreD = .portrait, loader: AppsDataHelper.BWGSsreD = .portrait, tutorial: AppsDataHelper.BWGSsreD = .portrait)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14AppsDataHelper9StartViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class Np7u8UHK {
  public static var qw05qKk1: () -> SwiftUI.AnyView?
  public static var Ltenj1Mu: () -> SwiftUI.AnyView
  public static var GdtozeIp: () -> SwiftUI.AnyView?
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor public class WvvyogSE {
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func bWuAOXfq() async
  #endif
  @objc deinit
}
extension AppsDataHelper.WvvyogSE {
  @_Concurrency.MainActor public func closeTutorial()
}
extension AppsDataHelper.WvvyogSE {
  @_Concurrency.MainActor convenience public init<Loading>(fZILfcTn: @escaping () -> Loading, i2MEDbWL: Swift.String, CAZST8V7: Swift.String, Ecjlq2vI: Swift.String) where Loading : SwiftUI.View
  @_Concurrency.MainActor convenience public init<Onboard, Loading>(withOnboarding ivbKckIG: @escaping () -> Onboard, fZILfcTn: @escaping () -> Loading, i2MEDbWL: Swift.String, CAZST8V7: Swift.String, Ecjlq2vI: Swift.String) where Onboard : SwiftUI.View, Loading : SwiftUI.View
}
extension AppsDataHelper.BWGSsreD : Swift.Equatable {}
extension AppsDataHelper.BWGSsreD : Swift.Hashable {}
extension AppsDataHelper.WvvyogSE : Swift.Sendable {}
